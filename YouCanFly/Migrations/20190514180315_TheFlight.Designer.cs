// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using YouCanFly.Models;

namespace YouCanFly.Migrations
{
    [DbContext(typeof(YouCanFlyContext))]
    [Migration("20190514180315_TheFlight")]
    partial class TheFlight
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("YouCanFly.Models.Classes", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ExtraPrice");

                    b.HasKey("Name");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("YouCanFly.Models.Customers", b =>
                {
                    b.Property<int>("Passport")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Country");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Name");

                    b.Property<int>("Phone");

                    b.HasKey("Passport");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("YouCanFly.Models.Destinations", b =>
                {
                    b.Property<int>("DestinationsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CurrencyValue");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.HasKey("DestinationsId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("YouCanFly.Models.Flight", b =>
                {
                    b.Property<int>("FlightNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DestinationsId");

                    b.Property<DateTime>("Landing");

                    b.Property<int?>("PlanesId");

                    b.Property<float>("Price");

                    b.Property<DateTime>("TakeOff");

                    b.Property<string>("TerminalName");

                    b.HasKey("FlightNumber");

                    b.HasIndex("DestinationsId");

                    b.HasIndex("PlanesId");

                    b.HasIndex("TerminalName");

                    b.ToTable("Flight");
                });

            modelBuilder.Entity("YouCanFly.Models.Orders", b =>
                {
                    b.Property<int>("OrdersId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CustomerPassport");

                    b.Property<DateTime>("Date");

                    b.HasKey("OrdersId");

                    b.HasIndex("CustomerPassport");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("YouCanFly.Models.Planes", b =>
                {
                    b.Property<int>("PlanesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Model");

                    b.Property<string>("Name");

                    b.Property<int>("NumberOfSeats");

                    b.HasKey("PlanesId");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("YouCanFly.Models.PlaneUnit", b =>
                {
                    b.Property<int>("PlanesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassName");

                    b.Property<int>("ClassesId");

                    b.Property<int?>("PlanesId1");

                    b.HasKey("PlanesId");

                    b.HasIndex("ClassName");

                    b.HasIndex("PlanesId1");

                    b.ToTable("PlaneUnit");
                });

            modelBuilder.Entity("YouCanFly.Models.Seats", b =>
                {
                    b.Property<int>("SeatsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<int?>("PlanesId");

                    b.Property<int?>("TicketNumber");

                    b.HasKey("SeatsId");

                    b.HasIndex("PlanesId");

                    b.HasIndex("TicketNumber");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("YouCanFly.Models.Terminal", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Name");

                    b.ToTable("Terminal");
                });

            modelBuilder.Entity("YouCanFly.Models.Ticket", b =>
                {
                    b.Property<int>("TicketNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassName");

                    b.Property<int?>("CustomerPassport");

                    b.Property<int?>("FlightNumber");

                    b.Property<DateTime>("LandingDate");

                    b.Property<int?>("OrdersId");

                    b.Property<DateTime>("TakeOffTime");

                    b.Property<string>("TerminalName");

                    b.HasKey("TicketNumber");

                    b.HasIndex("ClassName");

                    b.HasIndex("CustomerPassport");

                    b.HasIndex("FlightNumber");

                    b.HasIndex("OrdersId");

                    b.HasIndex("TerminalName");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("YouCanFly.Models.Flight", b =>
                {
                    b.HasOne("YouCanFly.Models.Destinations", "Destination")
                        .WithMany("Flights")
                        .HasForeignKey("DestinationsId");

                    b.HasOne("YouCanFly.Models.Planes", "Plane")
                        .WithMany("Flights")
                        .HasForeignKey("PlanesId");

                    b.HasOne("YouCanFly.Models.Terminal", "Terminal")
                        .WithMany("Flights")
                        .HasForeignKey("TerminalName");
                });

            modelBuilder.Entity("YouCanFly.Models.Orders", b =>
                {
                    b.HasOne("YouCanFly.Models.Customers", "Customer")
                        .WithMany("Orderses")
                        .HasForeignKey("CustomerPassport");
                });

            modelBuilder.Entity("YouCanFly.Models.PlaneUnit", b =>
                {
                    b.HasOne("YouCanFly.Models.Classes", "Class")
                        .WithMany("PlaneUnits")
                        .HasForeignKey("ClassName");

                    b.HasOne("YouCanFly.Models.Planes", "Plane")
                        .WithMany("PlaneUnits")
                        .HasForeignKey("PlanesId1");
                });

            modelBuilder.Entity("YouCanFly.Models.Seats", b =>
                {
                    b.HasOne("YouCanFly.Models.Planes", "Planes")
                        .WithMany("Seatses")
                        .HasForeignKey("PlanesId");

                    b.HasOne("YouCanFly.Models.Ticket", "Ticket")
                        .WithMany("Seatses")
                        .HasForeignKey("TicketNumber");
                });

            modelBuilder.Entity("YouCanFly.Models.Ticket", b =>
                {
                    b.HasOne("YouCanFly.Models.Classes", "Class")
                        .WithMany("Tickets")
                        .HasForeignKey("ClassName");

                    b.HasOne("YouCanFly.Models.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerPassport");

                    b.HasOne("YouCanFly.Models.Flight", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightNumber");

                    b.HasOne("YouCanFly.Models.Orders", "Order")
                        .WithMany("Tickets")
                        .HasForeignKey("OrdersId");

                    b.HasOne("YouCanFly.Models.Terminal", "Terminal")
                        .WithMany("Tickets")
                        .HasForeignKey("TerminalName");
                });
#pragma warning restore 612, 618
        }
    }
}
